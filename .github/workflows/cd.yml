name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-publish:
    name: Build & Publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm run test:coverage
      
    - name: Build application
      run: npm run build
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        
    - name: Set image output
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.ai-news-curator.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        # This would integrate with your deployment system
        # Examples: kubectl, helm, docker-compose, etc.
        echo "Deploying ${{ needs.build-and-publish.outputs.image }} to staging"
        
        # Example deployment command (replace with your actual deployment)
        # kubectl set image deployment/ai-news-curator ai-news-curator=${{ needs.build-and-publish.outputs.image }}
        
    - name: Run smoke tests
      run: |
        # Basic health check
        sleep 30  # Wait for deployment
        curl -f https://staging.ai-news-curator.com/health || exit 1
        
    - name: Notify deployment
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment.id,
            state: 'success',
            environment_url: 'https://staging.ai-news-curator.com',
            description: 'Deployed to staging successfully'
          })

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-publish, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://ai-news-curator.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying ${{ needs.build-and-publish.outputs.image }} to production"
        
        # Blue-green deployment example
        # kubectl apply -f k8s/production/
        # kubectl set image deployment/ai-news-curator ai-news-curator=${{ needs.build-and-publish.outputs.image }}
        
    - name: Run production smoke tests
      run: |
        sleep 60  # Wait for deployment
        curl -f https://ai-news-curator.com/health || exit 1
        
    - name: Create GitHub release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        generate_release_notes: true
        append_body: |
          
          ## Docker Image
          ```
          docker pull ${{ needs.build-and-publish.outputs.image }}
          ```
          
          ## Deployment
          - **Staging**: https://staging.ai-news-curator.com
          - **Production**: https://ai-news-curator.com