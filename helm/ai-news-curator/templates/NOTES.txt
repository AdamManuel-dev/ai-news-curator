1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ include "ai-news-curator.namespace" . }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "ai-news-curator.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ include "ai-news-curator.namespace" . }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ include "ai-news-curator.namespace" . }} svc -w {{ include "ai-news-curator.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ include "ai-news-curator.namespace" . }} {{ include "ai-news-curator.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.ports.http }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ include "ai-news-curator.namespace" . }} -l "{{ include "ai-news-curator.selectorLabels" . | replace ":" "=" | replace " " "," }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ include "ai-news-curator.namespace" . }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ include "ai-news-curator.namespace" . }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Monitor the deployment status:
   kubectl get pods --namespace {{ include "ai-news-curator.namespace" . }} -l "{{ include "ai-news-curator.selectorLabels" . | replace ":" "=" | replace " " "," }}"

3. Check application logs:
   kubectl logs --namespace {{ include "ai-news-curator.namespace" . }} -l "{{ include "ai-news-curator.selectorLabels" . | replace ":" "=" | replace " " "," }}" -f

4. Access health check:
   kubectl --namespace {{ include "ai-news-curator.namespace" . }} port-forward svc/{{ include "ai-news-curator.fullname" . }} 8080:{{ .Values.service.ports.http }}
   curl http://localhost:8080/health

{{- if .Values.autoscaling.enabled }}

5. Monitor autoscaling:
   kubectl get hpa --namespace {{ include "ai-news-curator.namespace" . }} {{ include "ai-news-curator.fullname" . }}
{{- end }}

{{- if .Values.monitoring.serviceMonitor.enabled }}

6. Prometheus metrics are available at:
   http://{{ include "ai-news-curator.fullname" . }}.{{ include "ai-news-curator.namespace" . }}.svc.cluster.local:{{ .Values.service.ports.http }}/metrics
{{- end }}

{{- if and .Values.postgresql.enabled .Values.redis.enabled }}

7. Database and Redis connections:
   - PostgreSQL: {{ .Release.Name }}-postgresql:5432
   - Redis: {{ .Release.Name }}-redis-master:6379
{{- end }}

{{- if .Values.ingress.enabled }}
{{- if .Values.ingress.tls }}

8. TLS/SSL is enabled. Make sure cert-manager is installed and the cluster issuer is configured.
{{- end }}
{{- end }}

{{ if .Values.secrets.create }}
WARNING: Default secrets are generated automatically. For production use, please:
1. Create your own secrets with proper values
2. Set .Values.secrets.create to false
3. Reference your external secrets in the deployment
{{- end }}

{{ if not .Values.externalDatabase.enabled }}
{{ if not .Values.postgresql.enabled }}
WARNING: No database is configured. Please enable either:
1. Internal PostgreSQL (.Values.postgresql.enabled=true), or  
2. External database (.Values.externalDatabase.enabled=true)
{{- end }}
{{- end }}

{{ if not .Values.externalRedis.enabled }}
{{ if not .Values.redis.enabled }}
WARNING: No Redis is configured. Please enable either:
1. Internal Redis (.Values.redis.enabled=true), or
2. External Redis (.Values.externalRedis.enabled=true)  
{{- end }}
{{- end }}